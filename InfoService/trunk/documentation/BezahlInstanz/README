
Dieses Readme-File wurde erstellt von Bastian Voigt <bavoigt@inf.fu-berlin.de>, 
Letzte Aktualisierung am 30.03.2004


ACHTUNG: Diese Dokumentation ist nicht mehr aktuell und muss geupdatet werden!
Bastian Voigt am 22.06.2004


INSTALLATION DER BEZAHLINSTANZ
------------------------------

Die Bezahlinstanz besteht aus 2 Teilen: Einem Javaprogramm, das
Verbindungen der JAPs und der AIs entgegennimmt sowie einem PHP-Teil,
der die Einzahl-prozedur über eine Web-Oberfläche ermöglicht. 


Installation des Java-Teils: 
----------------------------

1. Voraussetzungen

	- korrekt installiertes Java2 SDK ab Version 1.4 (http://java.sun.com)
	- JDBC driver for postgresql (http://jdbc.postgresql.org)
	- bouncycastle crypto provider ab version 120
    (http://www.bouncycastle.org) 
	- laufender postgresql-Server mit ODBC-Interface (zum Testen wurde Version 7.3 benutzt)


2. Vorbereitungen

Die .jar-Dateien (Postgresql und Bouncycastle) ins Verzeichnis
BezahlInstanz/run legen

- Datei BezahlInstanz/buildJPI.sh editieren, und die Namen der jars 
  im CLASSPATH ggf. anpassen

- Datei src/manifesto.txt editieren, und die Namen der jars im
  CLASSPATH ggf. anpassen


3. Übersetzen

Ins Verzeichnis BezahlInstanz/ wechseln und das Skript ./buildJPI.sh 
starten. Wenn alles korrekt funktioniert hat, liegt nachher ein neues 
jpi.jar im Verzeichnis BezahlInstanz/run/.


4. Erzeugen des Signierschlüssels und des Zertifikates

Die Bezahlinstanz benötigt einen privaten Schlüssel zum Signieren und ein
öffentliches Zertifikat, das an die Betreiber der Abrechnungsinstanzen 
weitergegeben werden muss. TODO: Hier weiterschreiben


5. Konfigurieren

Die Datei BezahlInstanz/run/config enthält ein Beispielkonfiguration für den
Java-Teil. Alle benötigten Einträge sind als Dummies schon vorhanden
und werden dort in Kommentaren erklärt. ACHTUNG: Das Format der 
Konfigurationsdateien wird demnächst geändert und dann muss auch hier 
noch eine Notiz hin! 


6. Starten

Ins Verzeichnis BezahlInstanz/run/ wechseln, und das Skript ./runJPI.sh
starten. Als erstes Argument muss der Name einer Konfigfile angegeben
werden. Beim ersten Start muss außerdem als zweites Argument "new"
übergeben werden (Achtung! "new" ist gefährlich weil die ganze
Datenbank dabei gelöscht wird! Nicht aus Versehen angeben!)



Installation des PHP-Teils: 
----------------------------

Für den PHP-Teil wird ein bereits installierter Webserver mit PHP-Modul
(zum Testen habe ich einen Apache 1.3 mit PHP-Mod verwendet) vorausgesetzt.

1. Das komplette Verzeichnis htdocs/ dorthin kopieren, wo der
Webserver drauf zugreifen kann (z.B. /var/www/pay)

2. Im htdocs-Verzeichnis befindet sich die Datei
paypal-verify.php. Hier kann eine Emailadresse eingetragen werden, an
die Fehler- und eventuelle Debugmeldungen zugesendet werden sollen,
sowie einige weitere Einstellungen die dort in Kommentaren erklärt
werden

3. Ebenfalls im htdocs-Verzeichnis liegt die Datei functions.php. Hier
müssen in der Funktion connectToDatabase() die entspr. Zugangsdaten
für die Datenbank eingetragen werden. Und bitte danach das Backup
"functions.php~" bzw. "functions.php.bak" o.ä.
der Datei wieder löschen, sonst liefert der Apache es mitsamt dem
Datenbankpasswort als Quelltext an böswillige Kiddies aus!

4. Das Verzeichnis htdocs/admin muss .htaccess-geschützt werden, denn
mit den dort liegenden Skripten kann man alle möglichen Änderungen an
der Datenbank machen. Eine Dummy-htaccess-Datei ist schon dabei, muss
nur noch angepasst werden


5. Wer jetzt ganz sicher gehen will, führt noch folgendes aus:

cd htdocs
find -name "*" -type d -exec touch {}/index.html \;
find -name "*~" -exec rm {} \;

Nur im Hauptverzeichnis htdocs sollte es keine index.html geben, weil
hier schon die index.php liegt.



ERSTER START
------------

Vor dem ersten Start des Java-Teils muss natürlich der Datenbankserver
schon verfügbar sein und der entsprechende Account
eingerichtet. Startet man die PIMain mit der Option "new", so wird die
komplette Datenbank gelöscht und dann die benötigten Tabellen neu
erstellt. Der Parameter "on" sollte immer mitgegeben werden außer wenn
man zu Testzwecken die http-Kommunikation im Klartext braucht

Starten der Bezahlinstanz:

java jpi.PIMain <configfile> [new] [on]

- mit dem optionalen Parameter "new" wird eine neue Datenbank angelegt
- mit dem optionalen Parameter "on" wird SSL "aktiviert"



