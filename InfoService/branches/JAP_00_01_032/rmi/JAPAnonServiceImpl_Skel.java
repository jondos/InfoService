// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package rmi;

public final class JAPAnonServiceImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("java.lang.String getInfoServiceServerName()"),
	new java.rmi.server.Operation("int getInfoServiceServerPort()"),
	new java.rmi.server.Operation("int getLocalListeningPort()"),
	new java.rmi.server.Operation("boolean getLocallyListeningOnly()"),
	new java.rmi.server.Operation("java.lang.String getProxyServerName()"),
	new java.rmi.server.Operation("int getProxyServerPort()"),
	new java.rmi.server.Operation("rmi.MixCascade loadMixCascadesFromTheNet()[]"),
	new java.rmi.server.Operation("boolean setInfoServiceServerName(java.lang.String, int)"),
	new java.rmi.server.Operation("boolean setLocalListeningPort(int)"),
	new java.rmi.server.Operation("boolean setLocallyListeningOnly(boolean)"),
	new java.rmi.server.Operation("boolean setMixCascadeCurrentlyUsed(rmi.MixCascade)"),
	new java.rmi.server.Operation("boolean setProxyServerName(java.lang.String, int)")
    };
    
    private static final long interfaceHash = -669753484155907738L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	rmi.JAPAnonServiceImpl server = (rmi.JAPAnonServiceImpl) obj;
	switch (opnum) {
	case 0: // getInfoServiceServerName()
	{
	    call.releaseInputStream();
	    java.lang.String $result = server.getInfoServiceServerName();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // getInfoServiceServerPort()
	{
	    call.releaseInputStream();
	    int $result = server.getInfoServiceServerPort();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // getLocalListeningPort()
	{
	    call.releaseInputStream();
	    int $result = server.getLocalListeningPort();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // getLocallyListeningOnly()
	{
	    call.releaseInputStream();
	    boolean $result = server.getLocallyListeningOnly();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // getProxyServerName()
	{
	    call.releaseInputStream();
	    java.lang.String $result = server.getProxyServerName();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // getProxyServerPort()
	{
	    call.releaseInputStream();
	    int $result = server.getProxyServerPort();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // loadMixCascadesFromTheNet()
	{
	    call.releaseInputStream();
	    rmi.MixCascade[] $result = server.loadMixCascadesFromTheNet();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // setInfoServiceServerName(String, int)
	{
	    java.lang.String $param_String_1;
	    int $param_int_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_int_2 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.setInfoServiceServerName($param_String_1, $param_int_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // setLocalListeningPort(int)
	{
	    int $param_int_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.setLocalListeningPort($param_int_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // setLocallyListeningOnly(boolean)
	{
	    boolean $param_boolean_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_boolean_1 = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.setLocallyListeningOnly($param_boolean_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // setMixCascadeCurrentlyUsed(MixCascade)
	{
	    rmi.MixCascade $param_MixCascade_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_MixCascade_1 = (rmi.MixCascade) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.setMixCascadeCurrentlyUsed($param_MixCascade_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // setProxyServerName(String, int)
	{
	    java.lang.String $param_String_1;
	    int $param_int_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_int_2 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.setProxyServerName($param_String_1, $param_int_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
